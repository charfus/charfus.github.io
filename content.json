{"meta":{"title":"Cha","subtitle":"about dev","description":"개발을 공부하며 부딪혔던 문제들을 기록합니다","author":"Haneul Cha","url":"https://haneulcha.github.io","root":"/"},"pages":[{"title":"about","date":"2020-09-12T15:37:24.000Z","updated":"2021-01-06T09:28:33.740Z","comments":true,"path":"about/index.html","permalink":"https://haneulcha.github.io/about/index.html","excerpt":"","text":"안녕하세요, 저는 차하늘입니다. 인생의 지침은 일희일비하지 않는 것… 개발하다가 마주친 문제들을 기록하고 있습니다. ( 비정기적으로… )"}],"posts":[{"title":"로그인 유지가 되지 않을 때","slug":"간신히-배포했더니-로그인-유지가-되지-않을-때","date":"2020-12-31T13:19:24.000Z","updated":"2021-01-06T09:25:23.696Z","comments":true,"path":"2020/12/31/간신히-배포했더니-로그인-유지가-되지-않을-때/","link":"","permalink":"https://haneulcha.github.io/2020/12/31/%EA%B0%84%EC%8B%A0%ED%9E%88-%EB%B0%B0%ED%8F%AC%ED%96%88%EB%8D%94%EB%8B%88-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%9C%A0%EC%A7%80%EA%B0%80-%EB%90%98%EC%A7%80-%EC%95%8A%EC%9D%84-%EB%95%8C/","excerpt":"","text":"배포하려고 계속 수정하는 과정에서 가장 막막했던 문제가 간신히 메인 페이지가 뜨는 데까지는 성공했는데 (그래서 이제 정말 끝난 줄 알았는데) 로그인을 해보니 다른 페이지로 넘어가는 순간 로그인이 풀려버리는 것이였다. 분명 개발할 때는 쿠키가 브라우저에 저장되면서 세션에서 유저 로그인 여부를 확인할 수 있었기 때문에 전혀 예상 못한 문제였다. 근데 정말 뭐가 문제인지 너무 막막했다. 쿠키 유효 기간 너무 짧은가 해서 세션 설정, 쿠키 설정 다 건드려보고 값도 바꿔봤는데 그대로 였다. redis에 문제가 생긴 건가 하고 redis 설정도 다시 해봤다. 지금 생각하니 잘못된 접근이였다. 로그인 유지가 안 되는데 왜 저장소들을 들여다보고 있어. 쿠키가 내 브라우저에 계속 남아있는지 아닌지부터 봐야지. 이래서 3시간 이상 연속으로 책상 앞에 앉아 있으면 안 되고 밤에는 잠을 자야한다. 아무튼 그 다음 날 일어나서 이것저것 after login cookie disappear, not saved 뭐 이런 단어로 검색을 했다가 간신히 방법을 찾았다. 결국 ‘expree-session’ 문서에 해결 방법이 있었다. 세션 설정 중 cookie.secure는 true일 경우, Secure를 설정한다. 즉, HTTPS 연결이 아닌 경우 클라이언트는 서버로 cookie를 보내지 못하고, cookie가 세팅되지 않는다. 다만, 프록시로 nodejs 서버를 사용하고 이 조건을 true로 세팅한 경우에 익스프레스에서 “trust proxy”를 설정해야 한다. 12345678var app &#x3D; express()app.set(&#39;trust proxy&#39;, 1) &#x2F;&#x2F; trust first proxyapp.use(session(&#123; secret: &#39;keyboard cat&#39;, resave: false, saveUninitialized: true, cookie: &#123; secure: true &#125;&#125;)) 그 외에 auto로도 설정할 수 있다고 한다.","categories":[{"name":"Post","slug":"Post","permalink":"https://haneulcha.github.io/categories/Post/"}],"tags":[{"name":"project","slug":"project","permalink":"https://haneulcha.github.io/tags/project/"},{"name":"galpi","slug":"galpi","permalink":"https://haneulcha.github.io/tags/galpi/"},{"name":"deploy","slug":"deploy","permalink":"https://haneulcha.github.io/tags/deploy/"}]},{"title":"CSP(Content Security Policy)","slug":"CSP-Content-Security-Policy","date":"2020-12-26T11:00:19.000Z","updated":"2020-12-26T11:38:55.552Z","comments":true,"path":"2020/12/26/CSP-Content-Security-Policy/","link":"","permalink":"https://haneulcha.github.io/2020/12/26/CSP-Content-Security-Policy/","excerpt":"","text":"결론서버에서 helmet 메소드로 설정할 수 있었다.","categories":[{"name":"Post","slug":"Post","permalink":"https://haneulcha.github.io/categories/Post/"}],"tags":[{"name":"project","slug":"project","permalink":"https://haneulcha.github.io/tags/project/"},{"name":"galpi","slug":"galpi","permalink":"https://haneulcha.github.io/tags/galpi/"},{"name":"deploy","slug":"deploy","permalink":"https://haneulcha.github.io/tags/deploy/"}]},{"title":"Global Object Id","slug":"Global-Object-Id","date":"2020-10-19T13:43:20.000Z","updated":"2020-12-26T10:38:00.000Z","comments":true,"path":"2020/10/19/Global-Object-Id/","link":"","permalink":"https://haneulcha.github.io/2020/10/19/Global-Object-Id/","excerpt":"","text":"20년 10월 19일 22시 43분 현재 내가 처한 상황:사람들이 올릴 각 포스트를 볼 수 있는 url이 필요하다. 무엇을 포스트의 고유한 식별자로 하지. mongoDB의 _id를 그대로 노출 시키기는 뭔가 찜찜하다. 유저 프로필의 경우엔 그냥 username으로 했는데… 인스타에 들어가서 포스트를 클릭해보니 보니 그리 길지 않은 고유 아이디를 url로 쓰고 있다. 어찌저찌 검색을 해보니 키워드는 ‘global object id’ 정도인 것 같고, ‘auto increment’에 대한 포스팅과 스택오버플로우의 질문들도 발견했다. ‘인덱스’와 ‘샤딩’은 아직 어디에 어떻게 쓰이는지 잘 모르겠다.그리고 ‘shortid’라는 npm 패키지도 발견했다. 해결하자… 12월 26일 배포까지 끝난 시점:이 고민은 사실 별 건 아니였다. nanoid, shortid, uuid 등 그냥 목적에 맞는 uuid 패키지를 검색해서 schema에서 uuid 생성 함수를 적용하니 해결되었다. mongoDB에서 원래 자동 생성되는 _id를 대신해서 uuid를 쓰는 것도 가능한데 나는 uuid 프로퍼티를 따로 추가했다. 처음에 왜 _id를 노출시키는 게 찜찜했는지는 나도 잘 모르겠다. 이후에 정렬을 해야할 일이 생길지도 모르겠다는 생각이 들어서 uuid와 별개로 index를 추가해서, 유저가 포스팅 할 때마다 increment 되도록 mongoDB 쿼리를 뒤져서 함수를 작성했다. 12345const index &#x3D; await Sequence.findOneAndUpdate( &#123; user &#125;, &#123; $inc: &#123; uid: 1 &#125; &#125;, &#123; new: true &#125; ); 개발 중간에 알아차린 실수는 uuid 생성 함수를 딸랑 쓰면 안 되고, 콜백으로 처리해야 한다는 점이였다. 처음에 딸랑 nanoid() 이렇게만 썼다가 모든 포스트의 uuid가 동일해졌고, 정반대의 목적으로 uuid를 활용한 꼴이 되었다. 12345678const postSchema &#x3D; new Schema(&#123; ... uuid: &#123; type: String, default: () &#x3D;&gt; nanoid(), &#125;, ...&#125; 결과적으로 모든 포스트가 /p/:uuid 주소로 각각 url을 갖게 되었다.","categories":[{"name":"Post","slug":"Post","permalink":"https://haneulcha.github.io/categories/Post/"}],"tags":[{"name":"mongoDB","slug":"mongoDB","permalink":"https://haneulcha.github.io/tags/mongoDB/"},{"name":"project","slug":"project","permalink":"https://haneulcha.github.io/tags/project/"},{"name":"galpi","slug":"galpi","permalink":"https://haneulcha.github.io/tags/galpi/"}]},{"title":"블로그를 만들었다","slug":"블로그를-만들었다","date":"2020-09-13T01:59:00.000Z","updated":"2020-09-15T02:23:56.711Z","comments":true,"path":"2020/09/13/블로그를-만들었다/","link":"","permalink":"https://haneulcha.github.io/2020/09/13/%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%97%88%EB%8B%A4/","excerpt":"","text":"인터넷을 접한지 20년이 다 되어가고, 그 동안 스쳐지나간 개인 홈페이지, 미니홈피, 블로그가 수십 개다…그 중 하나만 진득하게 했더라면… (사실 크게 달라진 것 없었겠지만…)다 큰 성인이 되고나서도 한참 후에야 이렇게 또 블로그를 하나 만들었다.이번에는 또 얼마나 가려나.. 라는 생각은 하지 않고 그냥 이것저것 기록을 해보겠다.대신 좀 더 책임감 있는 포스팅이 되길 바라고 스스로 다짐…👴","categories":[{"name":"Post","slug":"Post","permalink":"https://haneulcha.github.io/categories/Post/"}],"tags":[]}],"categories":[{"name":"Post","slug":"Post","permalink":"https://haneulcha.github.io/categories/Post/"}],"tags":[{"name":"project","slug":"project","permalink":"https://haneulcha.github.io/tags/project/"},{"name":"galpi","slug":"galpi","permalink":"https://haneulcha.github.io/tags/galpi/"},{"name":"deploy","slug":"deploy","permalink":"https://haneulcha.github.io/tags/deploy/"},{"name":"mongoDB","slug":"mongoDB","permalink":"https://haneulcha.github.io/tags/mongoDB/"}]}